// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: center_client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "center_client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace libevrpc {

namespace {

const ::google::protobuf::Descriptor* CenterClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterClient_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_center_5fclient_2eproto() {
  protobuf_AddDesc_center_5fclient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "center_client.proto");
  GOOGLE_CHECK(file != NULL);
  CenterClient_descriptor_ = file->message_type(0);
  static const int CenterClient_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterClient, center_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterClient, server_list_),
  };
  CenterClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterClient_descriptor_,
      CenterClient::default_instance_,
      CenterClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterClient));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_center_5fclient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterClient_descriptor_, &CenterClient::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_center_5fclient_2eproto() {
  delete CenterClient::default_instance_;
  delete CenterClient_reflection_;
}

void protobuf_AddDesc_center_5fclient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::libevrpc::protobuf_AddDesc_center_5ftype_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023center_client.proto\022\010libevrpc\032\021center_"
    "type.proto\"8\n\014CenterClient\022\023\n\013center_lis"
    "t\030\001 \003(\t\022\023\n\013server_list\030\002 \003(\t", 108);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "center_client.proto", &protobuf_RegisterTypes);
  CenterClient::default_instance_ = new CenterClient();
  CenterClient::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_center_5fclient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_center_5fclient_2eproto {
  StaticDescriptorInitializer_center_5fclient_2eproto() {
    protobuf_AddDesc_center_5fclient_2eproto();
  }
} static_descriptor_initializer_center_5fclient_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CenterClient::kCenterListFieldNumber;
const int CenterClient::kServerListFieldNumber;
#endif  // !_MSC_VER

CenterClient::CenterClient()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libevrpc.CenterClient)
}

void CenterClient::InitAsDefaultInstance() {
}

CenterClient::CenterClient(const CenterClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:libevrpc.CenterClient)
}

void CenterClient::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterClient::~CenterClient() {
  // @@protoc_insertion_point(destructor:libevrpc.CenterClient)
  SharedDtor();
}

void CenterClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterClient_descriptor_;
}

const CenterClient& CenterClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_5fclient_2eproto();
  return *default_instance_;
}

CenterClient* CenterClient::default_instance_ = NULL;

CenterClient* CenterClient::New() const {
  return new CenterClient;
}

void CenterClient::Clear() {
  center_list_.Clear();
  server_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libevrpc.CenterClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string center_list = 1;
      case 1: {
        if (tag == 10) {
         parse_center_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_center_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->center_list(this->center_list_size() - 1).data(),
            this->center_list(this->center_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "center_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_center_list;
        if (input->ExpectTag(18)) goto parse_server_list;
        break;
      }

      // repeated string server_list = 2;
      case 2: {
        if (tag == 18) {
         parse_server_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_server_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_list(this->server_list_size() - 1).data(),
            this->server_list(this->server_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libevrpc.CenterClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libevrpc.CenterClient)
  return false;
#undef DO_
}

void CenterClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libevrpc.CenterClient)
  // repeated string center_list = 1;
  for (int i = 0; i < this->center_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->center_list(i).data(), this->center_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "center_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->center_list(i), output);
  }

  // repeated string server_list = 2;
  for (int i = 0; i < this->server_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->server_list(i).data(), this->server_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "server_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libevrpc.CenterClient)
}

::google::protobuf::uint8* CenterClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libevrpc.CenterClient)
  // repeated string center_list = 1;
  for (int i = 0; i < this->center_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->center_list(i).data(), this->center_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "center_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->center_list(i), target);
  }

  // repeated string server_list = 2;
  for (int i = 0; i < this->server_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_list(i).data(), this->server_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->server_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libevrpc.CenterClient)
  return target;
}

int CenterClient::ByteSize() const {
  int total_size = 0;

  // repeated string center_list = 1;
  total_size += 1 * this->center_list_size();
  for (int i = 0; i < this->center_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->center_list(i));
  }

  // repeated string server_list = 2;
  total_size += 1 * this->server_list_size();
  for (int i = 0; i < this->server_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->server_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterClient::MergeFrom(const CenterClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  center_list_.MergeFrom(from.center_list_);
  server_list_.MergeFrom(from.server_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterClient::CopyFrom(const CenterClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterClient::IsInitialized() const {

  return true;
}

void CenterClient::Swap(CenterClient* other) {
  if (other != this) {
    center_list_.Swap(&other->center_list_);
    server_list_.Swap(&other->server_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterClient_descriptor_;
  metadata.reflection = CenterClient_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace libevrpc

// @@protoc_insertion_point(global_scope)
