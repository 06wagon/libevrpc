// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_cluster_server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc_cluster_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace libevrpc {

namespace {

const ::google::protobuf::Descriptor* RpcClusterServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcClusterServer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpc_5fcluster_5fserver_2eproto() {
  protobuf_AddDesc_rpc_5fcluster_5fserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpc_cluster_server.proto");
  GOOGLE_CHECK(file != NULL);
  RpcClusterServer_descriptor_ = file->message_type(0);
  static const int RpcClusterServer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcClusterServer, cluster_server_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcClusterServer, load_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcClusterServer, cpu_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcClusterServer, connection_num_),
  };
  RpcClusterServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcClusterServer_descriptor_,
      RpcClusterServer::default_instance_,
      RpcClusterServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcClusterServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcClusterServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcClusterServer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpc_5fcluster_5fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcClusterServer_descriptor_, &RpcClusterServer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpc_5fcluster_5fserver_2eproto() {
  delete RpcClusterServer::default_instance_;
  delete RpcClusterServer_reflection_;
}

void protobuf_AddDesc_rpc_5fcluster_5fserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::libevrpc::protobuf_AddDesc_center_5ftype_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030rpc_cluster_server.proto\022\010libevrpc\032\021ce"
    "nter_type.proto\"g\n\020RpcClusterServer\022\033\n\023c"
    "luster_server_addr\030\001 \001(\t\022\014\n\004load\030\002 \001(\002\022\020"
    "\n\010cpu_used\030\003 \001(\002\022\026\n\016connection_num\030\004 \001(\005", 160);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc_cluster_server.proto", &protobuf_RegisterTypes);
  RpcClusterServer::default_instance_ = new RpcClusterServer();
  RpcClusterServer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpc_5fcluster_5fserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpc_5fcluster_5fserver_2eproto {
  StaticDescriptorInitializer_rpc_5fcluster_5fserver_2eproto() {
    protobuf_AddDesc_rpc_5fcluster_5fserver_2eproto();
  }
} static_descriptor_initializer_rpc_5fcluster_5fserver_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RpcClusterServer::kClusterServerAddrFieldNumber;
const int RpcClusterServer::kLoadFieldNumber;
const int RpcClusterServer::kCpuUsedFieldNumber;
const int RpcClusterServer::kConnectionNumFieldNumber;
#endif  // !_MSC_VER

RpcClusterServer::RpcClusterServer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libevrpc.RpcClusterServer)
}

void RpcClusterServer::InitAsDefaultInstance() {
}

RpcClusterServer::RpcClusterServer(const RpcClusterServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:libevrpc.RpcClusterServer)
}

void RpcClusterServer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cluster_server_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  load_ = 0;
  cpu_used_ = 0;
  connection_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcClusterServer::~RpcClusterServer() {
  // @@protoc_insertion_point(destructor:libevrpc.RpcClusterServer)
  SharedDtor();
}

void RpcClusterServer::SharedDtor() {
  if (cluster_server_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_server_addr_;
  }
  if (this != default_instance_) {
  }
}

void RpcClusterServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcClusterServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcClusterServer_descriptor_;
}

const RpcClusterServer& RpcClusterServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fcluster_5fserver_2eproto();
  return *default_instance_;
}

RpcClusterServer* RpcClusterServer::default_instance_ = NULL;

RpcClusterServer* RpcClusterServer::New() const {
  return new RpcClusterServer;
}

void RpcClusterServer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpcClusterServer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(load_, connection_num_);
    if (has_cluster_server_addr()) {
      if (cluster_server_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cluster_server_addr_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcClusterServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libevrpc.RpcClusterServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cluster_server_addr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_server_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cluster_server_addr().data(), this->cluster_server_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cluster_server_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_load;
        break;
      }

      // optional float load = 2;
      case 2: {
        if (tag == 21) {
         parse_load:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &load_)));
          set_has_load();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_cpu_used;
        break;
      }

      // optional float cpu_used = 3;
      case 3: {
        if (tag == 29) {
         parse_cpu_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_used_)));
          set_has_cpu_used();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_connection_num;
        break;
      }

      // optional int32 connection_num = 4;
      case 4: {
        if (tag == 32) {
         parse_connection_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connection_num_)));
          set_has_connection_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libevrpc.RpcClusterServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libevrpc.RpcClusterServer)
  return false;
#undef DO_
}

void RpcClusterServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libevrpc.RpcClusterServer)
  // optional string cluster_server_addr = 1;
  if (has_cluster_server_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_server_addr().data(), this->cluster_server_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_server_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_server_addr(), output);
  }

  // optional float load = 2;
  if (has_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->load(), output);
  }

  // optional float cpu_used = 3;
  if (has_cpu_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cpu_used(), output);
  }

  // optional int32 connection_num = 4;
  if (has_connection_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->connection_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libevrpc.RpcClusterServer)
}

::google::protobuf::uint8* RpcClusterServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libevrpc.RpcClusterServer)
  // optional string cluster_server_addr = 1;
  if (has_cluster_server_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_server_addr().data(), this->cluster_server_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_server_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_server_addr(), target);
  }

  // optional float load = 2;
  if (has_load()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->load(), target);
  }

  // optional float cpu_used = 3;
  if (has_cpu_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cpu_used(), target);
  }

  // optional int32 connection_num = 4;
  if (has_connection_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->connection_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libevrpc.RpcClusterServer)
  return target;
}

int RpcClusterServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cluster_server_addr = 1;
    if (has_cluster_server_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_server_addr());
    }

    // optional float load = 2;
    if (has_load()) {
      total_size += 1 + 4;
    }

    // optional float cpu_used = 3;
    if (has_cpu_used()) {
      total_size += 1 + 4;
    }

    // optional int32 connection_num = 4;
    if (has_connection_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connection_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcClusterServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcClusterServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcClusterServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcClusterServer::MergeFrom(const RpcClusterServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster_server_addr()) {
      set_cluster_server_addr(from.cluster_server_addr());
    }
    if (from.has_load()) {
      set_load(from.load());
    }
    if (from.has_cpu_used()) {
      set_cpu_used(from.cpu_used());
    }
    if (from.has_connection_num()) {
      set_connection_num(from.connection_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcClusterServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcClusterServer::CopyFrom(const RpcClusterServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcClusterServer::IsInitialized() const {

  return true;
}

void RpcClusterServer::Swap(RpcClusterServer* other) {
  if (other != this) {
    std::swap(cluster_server_addr_, other->cluster_server_addr_);
    std::swap(load_, other->load_);
    std::swap(cpu_used_, other->cpu_used_);
    std::swap(connection_num_, other->connection_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcClusterServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcClusterServer_descriptor_;
  metadata.reflection = RpcClusterServer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace libevrpc

// @@protoc_insertion_point(global_scope)
