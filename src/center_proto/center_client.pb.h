// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: center_client.proto

#ifndef PROTOBUF_center_5fclient_2eproto__INCLUDED
#define PROTOBUF_center_5fclient_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "center_type.pb.h"
// @@protoc_insertion_point(includes)

namespace libevrpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_center_5fclient_2eproto();
void protobuf_AssignDesc_center_5fclient_2eproto();
void protobuf_ShutdownFile_center_5fclient_2eproto();

class CenterClient;

// ===================================================================

class CenterClient : public ::google::protobuf::Message {
 public:
  CenterClient();
  virtual ~CenterClient();

  CenterClient(const CenterClient& from);

  inline CenterClient& operator=(const CenterClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CenterClient& default_instance();

  void Swap(CenterClient* other);

  // implements Message ----------------------------------------------

  CenterClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CenterClient& from);
  void MergeFrom(const CenterClient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string center_list = 1;
  inline int center_list_size() const;
  inline void clear_center_list();
  static const int kCenterListFieldNumber = 1;
  inline const ::std::string& center_list(int index) const;
  inline ::std::string* mutable_center_list(int index);
  inline void set_center_list(int index, const ::std::string& value);
  inline void set_center_list(int index, const char* value);
  inline void set_center_list(int index, const char* value, size_t size);
  inline ::std::string* add_center_list();
  inline void add_center_list(const ::std::string& value);
  inline void add_center_list(const char* value);
  inline void add_center_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& center_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_center_list();

  // repeated string server_list = 2;
  inline int server_list_size() const;
  inline void clear_server_list();
  static const int kServerListFieldNumber = 2;
  inline const ::std::string& server_list(int index) const;
  inline ::std::string* mutable_server_list(int index);
  inline void set_server_list(int index, const ::std::string& value);
  inline void set_server_list(int index, const char* value);
  inline void set_server_list(int index, const char* value, size_t size);
  inline ::std::string* add_server_list();
  inline void add_server_list(const ::std::string& value);
  inline void add_server_list(const char* value);
  inline void add_server_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& server_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_server_list();

  // @@protoc_insertion_point(class_scope:libevrpc.CenterClient)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> center_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> server_list_;
  friend void  protobuf_AddDesc_center_5fclient_2eproto();
  friend void protobuf_AssignDesc_center_5fclient_2eproto();
  friend void protobuf_ShutdownFile_center_5fclient_2eproto();

  void InitAsDefaultInstance();
  static CenterClient* default_instance_;
};
// ===================================================================


// ===================================================================

// CenterClient

// repeated string center_list = 1;
inline int CenterClient::center_list_size() const {
  return center_list_.size();
}
inline void CenterClient::clear_center_list() {
  center_list_.Clear();
}
inline const ::std::string& CenterClient::center_list(int index) const {
  // @@protoc_insertion_point(field_get:libevrpc.CenterClient.center_list)
  return center_list_.Get(index);
}
inline ::std::string* CenterClient::mutable_center_list(int index) {
  // @@protoc_insertion_point(field_mutable:libevrpc.CenterClient.center_list)
  return center_list_.Mutable(index);
}
inline void CenterClient::set_center_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:libevrpc.CenterClient.center_list)
  center_list_.Mutable(index)->assign(value);
}
inline void CenterClient::set_center_list(int index, const char* value) {
  center_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:libevrpc.CenterClient.center_list)
}
inline void CenterClient::set_center_list(int index, const char* value, size_t size) {
  center_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:libevrpc.CenterClient.center_list)
}
inline ::std::string* CenterClient::add_center_list() {
  return center_list_.Add();
}
inline void CenterClient::add_center_list(const ::std::string& value) {
  center_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:libevrpc.CenterClient.center_list)
}
inline void CenterClient::add_center_list(const char* value) {
  center_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:libevrpc.CenterClient.center_list)
}
inline void CenterClient::add_center_list(const char* value, size_t size) {
  center_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:libevrpc.CenterClient.center_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CenterClient::center_list() const {
  // @@protoc_insertion_point(field_list:libevrpc.CenterClient.center_list)
  return center_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CenterClient::mutable_center_list() {
  // @@protoc_insertion_point(field_mutable_list:libevrpc.CenterClient.center_list)
  return &center_list_;
}

// repeated string server_list = 2;
inline int CenterClient::server_list_size() const {
  return server_list_.size();
}
inline void CenterClient::clear_server_list() {
  server_list_.Clear();
}
inline const ::std::string& CenterClient::server_list(int index) const {
  // @@protoc_insertion_point(field_get:libevrpc.CenterClient.server_list)
  return server_list_.Get(index);
}
inline ::std::string* CenterClient::mutable_server_list(int index) {
  // @@protoc_insertion_point(field_mutable:libevrpc.CenterClient.server_list)
  return server_list_.Mutable(index);
}
inline void CenterClient::set_server_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:libevrpc.CenterClient.server_list)
  server_list_.Mutable(index)->assign(value);
}
inline void CenterClient::set_server_list(int index, const char* value) {
  server_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:libevrpc.CenterClient.server_list)
}
inline void CenterClient::set_server_list(int index, const char* value, size_t size) {
  server_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:libevrpc.CenterClient.server_list)
}
inline ::std::string* CenterClient::add_server_list() {
  return server_list_.Add();
}
inline void CenterClient::add_server_list(const ::std::string& value) {
  server_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:libevrpc.CenterClient.server_list)
}
inline void CenterClient::add_server_list(const char* value) {
  server_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:libevrpc.CenterClient.server_list)
}
inline void CenterClient::add_server_list(const char* value, size_t size) {
  server_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:libevrpc.CenterClient.server_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CenterClient::server_list() const {
  // @@protoc_insertion_point(field_list:libevrpc.CenterClient.server_list)
  return server_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CenterClient::mutable_server_list() {
  // @@protoc_insertion_point(field_mutable_list:libevrpc.CenterClient.server_list)
  return &server_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace libevrpc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_center_5fclient_2eproto__INCLUDED
